// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KVStorageServiceClient is the client API for KVStorageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KVStorageServiceClient interface {
	Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*Item, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Item, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
}

type kVStorageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKVStorageServiceClient(cc grpc.ClientConnInterface) KVStorageServiceClient {
	return &kVStorageServiceClient{cc}
}

func (c *kVStorageServiceClient) Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*Item, error) {
	out := new(Item)
	err := c.cc.Invoke(ctx, "/pb.KVStorageService/Put", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVStorageServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Item, error) {
	out := new(Item)
	err := c.cc.Invoke(ctx, "/pb.KVStorageService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVStorageServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/pb.KVStorageService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KVStorageServiceServer is the server API for KVStorageService service.
// All implementations must embed UnimplementedKVStorageServiceServer
// for forward compatibility
type KVStorageServiceServer interface {
	Put(context.Context, *PutRequest) (*Item, error)
	Get(context.Context, *GetRequest) (*Item, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	mustEmbedUnimplementedKVStorageServiceServer()
}

// UnimplementedKVStorageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedKVStorageServiceServer struct {
}

func (UnimplementedKVStorageServiceServer) Put(context.Context, *PutRequest) (*Item, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (UnimplementedKVStorageServiceServer) Get(context.Context, *GetRequest) (*Item, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedKVStorageServiceServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedKVStorageServiceServer) mustEmbedUnimplementedKVStorageServiceServer() {}

// UnsafeKVStorageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KVStorageServiceServer will
// result in compilation errors.
type UnsafeKVStorageServiceServer interface {
	mustEmbedUnimplementedKVStorageServiceServer()
}

func RegisterKVStorageServiceServer(s grpc.ServiceRegistrar, srv KVStorageServiceServer) {
	s.RegisterService(&KVStorageService_ServiceDesc, srv)
}

func _KVStorageService_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVStorageServiceServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.KVStorageService/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVStorageServiceServer).Put(ctx, req.(*PutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KVStorageService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVStorageServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.KVStorageService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVStorageServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KVStorageService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVStorageServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.KVStorageService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVStorageServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KVStorageService_ServiceDesc is the grpc.ServiceDesc for KVStorageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KVStorageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.KVStorageService",
	HandlerType: (*KVStorageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Put",
			Handler:    _KVStorageService_Put_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _KVStorageService_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _KVStorageService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kvstorage.proto",
}
